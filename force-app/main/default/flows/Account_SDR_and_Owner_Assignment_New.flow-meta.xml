<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>57.0</apiVersion>
    <assignments>
        <name>Copy_1_of_Copy_1_of_Set_Values_for_Owner_to_Name_SA</name>
        <label>Copy 1 of Copy 1 of Set Values for Owner to Name, SA</label>
        <locationX>2778</locationX>
        <locationY>827</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.AE__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SDR__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Copy_1_of_Set_Values_for_Owner_AE2_SA</name>
        <label>Copy 1 of Set Values for Owner, AE2, SA</label>
        <locationX>1986</locationX>
        <locationY>827</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.AE__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.AE_2__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.AE2__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Clark_Edwards.Id</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Copy_1_of_Set_Values_for_Owner_SA</name>
        <label>Copy 1 of Set Values for Owner, SA</label>
        <locationX>2250</locationX>
        <locationY>1043</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Scott_Wishnow.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SDR__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Copy_1_of_Set_Values_for_Owner_to_Name_Brian</name>
        <label>Copy 1 of Set Values for Owner to Louis</label>
        <locationX>3526</locationX>
        <locationY>1535</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Copy_1_of_Get_User_Brian_Thompson.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Copy_1_of_Get_User_Brian_Thompson.Id</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Copy_1_of_Set_Values_for_Owner_to_Name_SA</name>
        <label>Copy 1 of Set Values for Owner to Name, SA</label>
        <locationX>842</locationX>
        <locationY>827</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.AE__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Copy_2_of_Set_Values_for_Owner_to_Name_SA</name>
        <label>Copy 2 of Set Values for Owner to Name, SA</label>
        <locationX>1106</locationX>
        <locationY>935</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Copy_1_of_Get_User_Nate.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Copy_3_of_Set_Values_for_Owner_to_Name_SA</name>
        <label>Copy 3 of Set Values for Owner to Name, SA</label>
        <locationX>2514</locationX>
        <locationY>1043</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Copy_2_of_Get_User_Nate.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SDR__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Set_Values_for_Owner_AE2_SA</name>
        <label>Set Values for Owner, AE2, SA</label>
        <locationX>50</locationX>
        <locationY>827</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.AE__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.AE_2__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.AE2__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Set_Values_for_Owner_Dave_and_Clark_SA</name>
        <label>Set Values for Owner Dave and Clark, SA</label>
        <locationX>3306</locationX>
        <locationY>1043</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Dave_Gridley_Assignment.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Clark_Edwards_Assignment.Id</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Set_Values_for_Owner_SA</name>
        <label>Set Values for Owner, SA</label>
        <locationX>314</locationX>
        <locationY>1043</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Scott.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Set_Values_for_Owner_to_Dave_Gridley</name>
        <label>Set Values for Owner to  Dave Gridley</label>
        <locationX>1370</locationX>
        <locationY>935</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Dave_Gridley.Id</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>Set Louis as Owner and SDR of international lead</description>
        <name>Set_Values_for_Owner_to_Name_Brian</name>
        <label>Set Values for Owner to Louis</label>
        <locationX>1590</locationX>
        <locationY>1427</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Brian_Thompson.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Brian_Thompson.Id</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Set_Values_for_Owner_to_Name_SA</name>
        <label>Set Values for Owner to Name, SA</label>
        <locationX>578</locationX>
        <locationY>1043</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Nate.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SA__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Zip_Code_Data.SA__c</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Set_Values_for_Owner_to_Nate_SA</name>
        <label>Set Values for Owner to Nate, SA</label>
        <locationX>3042</locationX>
        <locationY>1043</locationY>
        <assignmentItems>
            <assignToReference>$Record.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Nate_Lippert_Assignment_1.Contact.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.SDR__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_User_Zoe_Gum_Assignment_1.Id</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <decisions>
        <name>Check_Industry</name>
        <label>Check Industry</label>
        <locationX>347</locationX>
        <locationY>611</locationY>
        <defaultConnector>
            <targetReference>Check_NY_or_NJ</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Industry</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Industry</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Education</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Clark</targetReference>
            </connector>
            <label>Industry</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_NY_or_NJ</name>
        <label>Check NY or NJ</label>
        <locationX>644</locationX>
        <locationY>719</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Set_Values_for_Owner_to_Name_SA</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>NY_Or_NJ</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>Get_Zip_Code_Data.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>NY</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_Zip_Code_Data.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>NJ</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Name_Starts_With_A_to_K</targetReference>
            </connector>
            <label>NY Or NJ</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_Provience_Exist</name>
        <label>Check Provience Exist</label>
        <locationX>1590</locationX>
        <locationY>611</locationY>
        <defaultConnector>
            <targetReference>Get_User_Brian_Thompson</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_Exist</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Compare_Provience</targetReference>
            </connector>
            <label>Yes Exist</label>
        </rules>
    </decisions>
    <decisions>
        <name>Compare_Provience</name>
        <label>Compare Provience</label>
        <locationX>1370</locationX>
        <locationY>719</locationY>
        <defaultConnector>
            <targetReference>Get_User_Brian_Thompson</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>For_Nate_Lippert</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>New Brunswick</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Newfoundland and Labrador</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Nova Scotia</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Ontario</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Prince Edward Island</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Quebec</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Copy_1_of_Get_User_Nate</targetReference>
            </connector>
            <label>For Nate Lippert</label>
        </rules>
        <rules>
            <name>For_Dave_Gridley</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Yukon</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Alberta</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>British Columbia</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Manitoba</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Northwest Territories</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Nunavut</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Saskatchewan</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Dave_Gridley</targetReference>
            </connector>
            <label>For  Dave Gridley</label>
        </rules>
    </decisions>
    <decisions>
        <name>Copy_1_of_Check_Industry</name>
        <label>Copy 1 of Check Industry</label>
        <locationX>2283</locationX>
        <locationY>611</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Check_NY_or_NJ</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Copy_1_of_Industry</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Industry</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Education</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Clark_Edwards</targetReference>
            </connector>
            <label>Copy 1 of Industry</label>
        </rules>
    </decisions>
    <decisions>
        <name>Copy_1_of_Check_NY_or_NJ</name>
        <label>Copy 1 of Check NY or NJ</label>
        <locationX>2580</locationX>
        <locationY>719</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Copy_1_of_Set_Values_for_Owner_to_Name_SA</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Copy_1_of_NY_Or_NJ</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>Get_Zip_Code_Data.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>NY</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_Zip_Code_Data.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>NJ</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Copy_1_of_Name_Starts_With_A_to_K</targetReference>
            </connector>
            <label>Copy 1 of NY Or NJ</label>
        </rules>
    </decisions>
    <decisions>
        <name>Copy_1_of_Check_Provience_Exist</name>
        <label>Copy 1 of Check Provience Exist</label>
        <locationX>3526</locationX>
        <locationY>611</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Get_User_Brian_Thompson</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Copy_1_of_Yes_Exist</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Copy_1_of_Compare_Provience</targetReference>
            </connector>
            <label>Copy 1 of Yes Exist</label>
        </rules>
    </decisions>
    <decisions>
        <name>Copy_1_of_Compare_Provience</name>
        <label>Copy 1 of Compare Provience</label>
        <locationX>3306</locationX>
        <locationY>719</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Get_User_Brian_Thompson</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Copy_1_of_For_Nate_Lippert</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>New Brunswick</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Newfoundland and Labrador</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Nova Scotia</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Ontario</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Prince Edward Island</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Quebec</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Nate_Lippert_Assignment_1</targetReference>
            </connector>
            <label>Copy 1 of For Nate Lippert</label>
        </rules>
        <rules>
            <name>Copy_1_of_For_Dave_Gridley</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Yukon</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Alberta</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>British Columbia</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Manitoba</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Northwest Territories</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Nunavut</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.BillingState</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Saskatchewan</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Dave_Gridley_Assignment</targetReference>
            </connector>
            <label>Copy 1 of For  Dave Gridley</label>
        </rules>
    </decisions>
    <decisions>
        <name>Copy_1_of_Name_Starts_With_A_to_K</name>
        <label>Copy 1 of Name Starts With A to K</label>
        <locationX>2382</locationX>
        <locationY>827</locationY>
        <defaultConnector>
            <targetReference>Copy_2_of_Get_User_Nate</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Copy_1_of_Yes_A_to_K</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>A</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>B</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>C</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>D</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>E</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>F</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>G</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>H</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>I</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>J</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>K</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Scott_Wishnow</targetReference>
            </connector>
            <label>Copy 1 of Yes A to K</label>
        </rules>
    </decisions>
    <decisions>
        <name>Copy_1_of_Zip_Code_Found</name>
        <label>Copy 1 of Zip Code Found</label>
        <locationX>2904</locationX>
        <locationY>503</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Check_Provience_Exist</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Copy_1_of_YesZipFound</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Zip_Code_Data</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Copy_1_of_Check_Industry</targetReference>
            </connector>
            <label>Copy 1 of YesZipFound</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Account_Source_Partner</name>
        <label>Is Account Source Partner</label>
        <locationX>1936</locationX>
        <locationY>395</locationY>
        <defaultConnector>
            <targetReference>Copy_1_of_Zip_Code_Found</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>YesPartner</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.AccountSource</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Partner Registered</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Zip_Code_Found</targetReference>
            </connector>
            <label>YesPartner</label>
        </rules>
    </decisions>
    <decisions>
        <name>Name_Starts_With_A_to_K</name>
        <label>Name Starts With A to K</label>
        <locationX>446</locationX>
        <locationY>827</locationY>
        <defaultConnector>
            <targetReference>Get_User_Nate</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_A_to_K</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>A</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>B</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>C</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>D</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>E</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>F</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>G</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>H</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>I</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>J</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Name</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <stringValue>K</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Scott</targetReference>
            </connector>
            <label>Yes A to K</label>
        </rules>
    </decisions>
    <decisions>
        <name>Zip_Code_Found</name>
        <label>Zip Code Found</label>
        <locationX>968</locationX>
        <locationY>503</locationY>
        <defaultConnector>
            <targetReference>Check_Provience_Exist</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>YesZipFound</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Zip_Code_Data</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Check_Industry</targetReference>
            </connector>
            <label>YesZipFound</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <name>varZipCodeFormula</name>
        <dataType>String</dataType>
        <expression>LEFT(SUBSTITUTE({!$Record.BillingPostalCode}, &quot; &quot;, &quot;&quot;),5)</expression>
    </formulas>
    <interviewLabel>Account - SDR and Owner Assignment {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Account - SDR and Owner Assignment New</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <name>Copy_1_of_Get_User_Brian_Thompson</name>
        <label>Copy 1 of Get User Louis Serlenga</label>
        <locationX>3526</locationX>
        <locationY>1427</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Copy_1_of_Set_Values_for_Owner_to_Name_Brian</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue> Louis</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Serlenga</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Copy_1_of_Get_User_Nate</name>
        <label>Copy 1 of Get User Nate</label>
        <locationX>1106</locationX>
        <locationY>827</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Copy_2_of_Set_Values_for_Owner_to_Name_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Nate</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Lippert</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Copy_2_of_Get_User_Nate</name>
        <label>Copy 2 of Get User Nate</label>
        <locationX>2514</locationX>
        <locationY>935</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Copy_3_of_Set_Values_for_Owner_to_Name_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Nate</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Lippert</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Brian_Thompson</name>
        <label>Get User Louis Serlenga</label>
        <locationX>1590</locationX>
        <locationY>1319</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_to_Name_Brian</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue> Louis</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Serlenga</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Clark</name>
        <label>Get User Clark</label>
        <locationX>50</locationX>
        <locationY>719</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_AE2_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Clark</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Edwards</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Clark_Edwards</name>
        <label>Get User Clark Edwards</label>
        <locationX>1986</locationX>
        <locationY>719</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Copy_1_of_Set_Values_for_Owner_AE2_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Clark</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Edwards</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Clark_Edwards_Assignment</name>
        <label>Get User Clark Edwards Assignment</label>
        <locationX>3306</locationX>
        <locationY>935</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_Dave_and_Clark_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Clark</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Edwards</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Dave_Gridley</name>
        <label>Get User  Dave Gridley</label>
        <locationX>1370</locationX>
        <locationY>827</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_to_Dave_Gridley</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue> Dave</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Gridley</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Dave_Gridley_Assignment</name>
        <label>Get User  Dave Gridley Assignment</label>
        <locationX>3306</locationX>
        <locationY>827</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_User_Clark_Edwards_Assignment</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue> Dave</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Gridley</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Nate</name>
        <label>Get User Nate</label>
        <locationX>578</locationX>
        <locationY>935</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_to_Name_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Nate</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Lippert</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Nate_Lippert_Assignment_1</name>
        <label>Get User Nate Lippert Assignment 1</label>
        <locationX>3042</locationX>
        <locationY>827</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_User_Zoe_Gum_Assignment_1</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Nate</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Lippert</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Scott</name>
        <label>Get User Scott</label>
        <locationX>314</locationX>
        <locationY>935</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Scott</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Wishnow</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Scott_Wishnow</name>
        <label>Get User Scott Wishnow</label>
        <locationX>2250</locationX>
        <locationY>935</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Copy_1_of_Set_Values_for_Owner_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Scott</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Wishnow</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_User_Zoe_Gum_Assignment_1</name>
        <label>Get User Zoe Gum Assignment 1</label>
        <locationX>3042</locationX>
        <locationY>935</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Set_Values_for_Owner_to_Nate_SA</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>FirstName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Zoe</stringValue>
            </value>
        </filters>
        <filters>
            <field>LastName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Gum</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Zip_Code_Data</name>
        <label>Get Zip Code Data</label>
        <locationX>1936</locationX>
        <locationY>287</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Is_Account_Source_Partner</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>varZipCodeFormula</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Zip_Code__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>1810</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Get_Zip_Code_Data</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>BillingPostalCode</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>SDR__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>SA__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <object>Account</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordBeforeSave</triggerType>
    </start>
    <status>Draft</status>
</Flow>
